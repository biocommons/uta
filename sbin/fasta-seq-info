#!/usr/bin/env python

from __future__ import division

__doc__ = """make a file of length,md5,aliases from provided fasta files

eg$ stdbuf -o0 -e0 ./fasta-seq-info *.{fa,faa,fna}

returns a TSV file like this:
len		md5		aliases
"""


import hashlib
import logging
import re
import sys

import pysam


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger()

    nontags = set(['gi','ref',''])
    id_re = re.compile('gi\|(\d+)\|ref\|([^|]+)\|')

    print("\t".join(['md5','len','aliases']))

    n_fns = len(sys.argv)-1
    for i_fn,fn in enumerate(sys.argv[1:]):
        logger.info("[{i_fn}/{n_fns} ({p_fn:.0f}%)]: opening {fn}".format(
            i_fn=i_fn+1, n_fns=n_fns, p_fn=(i_fn+1)/n_fns*100, fn=fn))

        fa = pysam.Fastafile(fn)

        refs = fa.references
        n_refs = len(refs)
        for i_ref,ref in enumerate(refs):
            m = id_re.match(ref)
            if m:
                gi,ac = m.groups()
                srefs = ['gi_'+gi,ac]
            else:
                srefs = [ref]

            seq = fa.fetch(ref).upper()
            md5 = hashlib.md5(seq).hexdigest()

            print("\t".join([md5,str(len(seq)),','.join(srefs)]))

            if i_ref%20 == 0 or i_ref==n_refs:
                logging.info("{fn}: {i_ref}/{n_refs} ({p_ref:.1f}%)".format(
                    i_ref=i_ref+1,n_refs=n_refs,p_ref=(i_ref+1)/n_refs*100,fn=fn))
