#!/usr/bin/env python

from __future__ import division

import argparse
import gzip
import logging, logging.config
import os
import pkg_resources
import re
import sys

import Bio.SeqIO
from bdi.utils.aminoacids import seq_md5
import eutils.client

from uta.formats.exonset import ExonSet,ExonSetWriter
from uta.formats.geneinfo import GeneInfo,GeneInfoWriter
from uta.formats.txinfo import TxInfo,TxInfoWriter

transcript_origin='NCBI RefSeq'

def parse_args(argv):
    ap = argparse.ArgumentParser(
        description = __doc__,
        )
    ap.add_argument('GENES',
                    nargs='*')
    ap.add_argument('--prefix','-p',
                    default='ncbi')
    opts = ap.parse_args(argv)
    return opts


def fetch_exonset_for_gene(e_gene,esw,hgnc):
    tx_processed = set()
    for e_ref in e_gene.references:
        for e_prd in e_ref.products:
            if not e_prd.acv.startswith('NM_'):
                logger.info("skipping non-NM transcript {e_prd.acv} for {e_gene.hgnc} on {e_ref.acv}".format(
                    e_gene=e_gene,e_ref=e_ref,e_prd=e_prd))
                continue
            es = ExonSet(tx_ac=e_prd.acv,
                         alt_ac=e_ref.acv,
                         method='splign',
                         strand=e_prd.genomic_coords.strand,
                         exons_se_i=e_prd.genomic_coords.intervals
                )
            esw.write(es)
            tx_processed.add(e_prd.acv)
    return tx_processed


if __name__ == '__main__':
    logging_conf_fn = pkg_resources.resource_filename('uta', 'etc/logging.conf')
    logging.config.fileConfig(logging_conf_fn)
    logging.getLogger().setLevel(logging.INFO)
    logger = logging.getLogger(__name__)

    opts = parse_args(sys.argv[1:])
    ec = eutils.client.Client()

    tx_set = set()
    n = len(opts.GENES)
    giw = GeneInfoWriter(gzip.open(opts.prefix + '.geneinfo.gz','w'))
    esw = ExonSetWriter(gzip.open(opts.prefix + '.exonsets.gz','w'))
    for i,hgnc in enumerate(opts.GENES):
        logger.info("="*70+"\n{i}/{n} ({p:.1f}%): {hgnc}...".format(
            i=i, n=n, p=(i+1)/n*100, hgnc=hgnc))

        e_gene = ec.fetch_gene_by_hgnc(hgnc)

        gi = GeneInfo(hgnc=hgnc,
                      maploc=e_gene.maploc,
                      aliases=','.join(e_gene.synonyms),
                      type=e_gene.type,
                      summary=e_gene.summary,
                      descr=e_gene.description)
        giw.write(gi)

        if e_gene.type != 'protein-coding':
            logger.info("Skipping {e_gene.hgnc} (not protein coding)".format(e_gene=e_gene))
            continue

        try:
            tx_seen = fetch_exonset_for_gene(e_gene,esw,hgnc)
            tx_set.update(tx_seen)
        except Exception as e:
            logger.exception(e)
            pass


    tiw = TxInfoWriter(gzip.open(opts.prefix + '.txinfo.gz','w'))
    n = len(tx_set)
    for i,ac in enumerate(tx_set):
        logger.info("="*70+"\n{i}/{n} ({p:.1f}%): {ac}...".format(
            i=i, n=n, p=(i+1)/n*100, ac=ac))
        try:
            e_tx = ec.fetch_nuccore_by_ac(ac)
            es = TxInfo(tx_ac=ac,
                        origin=transcript_origin,
                        hgnc=e_tx.gene,
                        cds_se_i=e_tx.cds_se_i,
                        exons_se_i=e_tx.exons_se_i
                )
            tiw.write(es)
        except Exception as e:
            logger.exception(e)
            pass
