#!/usr/bin/env python

"""Writes SeqInfo files from fasta to stdout. Writes transcript accessions that are missing from
SeqRepo to a file called exonset_missing_accessions.txt in the same directory as the input files."""

import argparse
import gzip
import itertools
import logging.config
import os
import re
import sys

import configparser as ConfigParser
import pkg_resources
from biocommons.seqrepo import SeqRepo
from bioutils.digests import seq_md5

from uta.formats.exonset import ExonSetReader
from uta.formats.seqinfo import SeqInfo, SeqInfoWriter


def parse_args(argv):
    ap = argparse.ArgumentParser(
        description=__doc__,
    )
    ap.add_argument("FILES",
                    nargs="+")
    ap.add_argument("--max-seq-len", "-s",
                    type=int)
    ap.add_argument("--origin", "-o",
                    required=True)
    ap.add_argument("--conf",
                    default=[
                        pkg_resources.resource_filename("uta", "../../etc/global.conf")]
                    )

    opts = ap.parse_args(argv)
    return opts


if __name__ == "__main__":
    logging_conf_fn = pkg_resources.resource_filename(
        "uta", "etc/logging.conf")
    logging.config.fileConfig(logging_conf_fn)
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.INFO)

    ac_re = re.compile("[NX][CGMPR]_")

    opts = parse_args(sys.argv[1:])
    input_dir = os.path.dirname(opts.FILES[0])
    missing_accessions_file_path = os.path.join(input_dir, "exonset_missing_accessions.txt")

    cf = ConfigParser.ConfigParser()
    for conf_fn in opts.conf:
        cf.read_file(open(conf_fn))
        logger.info("loaded " + conf_fn)

    in_fn = opts.FILES[0]
    in_fh = gzip.open(in_fn, 'rt') if in_fn.endswith(".gz") else open(in_fn)
    esr = ExonSetReader(in_fh)
    logger.info("opened " + in_fn)

    #fa_dirs = cf.get("sequences", "fasta_directories").strip().splitlines()
    #mfdb = MultiFastaDB(fa_dirs, use_meta_index=True)
    sr_dir = cf.get("sequences", "seqrepo")
    sr = SeqRepo(root_dir=sr_dir)
    logger.info("Opened sequence directories: " + sr_dir)

    siw = SeqInfoWriter(sys.stdout)
    logger.info("Writing seqinfo to stdout")

    # this is just a fancy way to make a set of all tx_ac and alt_ac accessions
    acs = sorted(
        set(itertools.chain.from_iterable((es.tx_ac, es.alt_ac) for es in esr)))
    missing_acs_count = 0
    with open(missing_accessions_file_path, "w") as f:
        f.write("tx_ac\n")
        for ac in acs:
            try:
                seq = str(sr[ac])
            except KeyError:
                logging.warning("Sequence not found: " + ac)
                missing_acs_count += 1
                f.write(ac + "\n")
                continue

            si = SeqInfo(
                ac=ac,
                descr=None,
                len=len(seq),
                md5=seq_md5(seq),
                origin=opts.origin,
                seq=None,
            )
            siw.write(si)

    # Log the number of missing accessions written to the file
    logging.info(f"{missing_acs_count} accessions were missing from Seqrepo. See {missing_accessions_file_path}.")