#!/usr/bin/env python

from __future__ import division

import argparse
import gzip
import logging, logging.config
import os
import pkg_resources
import re
import sys

import Bio.SeqIO
from bdi.utils.aminoacids import seq_md5
import eutils.client

from uta.formats.exonset import ExonSet,ExonSetWriter

def parse_args(argv):
    ap = argparse.ArgumentParser(
        description = __doc__,
        )
    ap.add_argument('GENES',
                    nargs='*')
    ap.add_argument('--with-transcripts','-t',
                    default=False,
                    action='store_true')
    
    
    opts = ap.parse_args(argv)
    return opts


def process1(ec,esw,hgnc):
    e_gene = ec.fetch_gene_by_hgnc(hgnc)
    if e_gene.type != 'protein-coding':
        logger.warning("Skipping {e_gene.hgnc} (not protein coding)".format(e_gene=e_gene))
        return
    for e_ref in e_gene.references:
        for e_prd in e_ref.products:
            if not e_prd.acv.startswith('NM_'):
                logging.warn("skipping non-NM transcript {e_prd.acv} for {e_gene.hgnc} on {e_ref.acv}".format(
                    e_gene=e_gene,e_ref=e_ref,e_prd=e_prd))
                continue
            es = ExonSet(tx_ac=e_prd.acv,
                         alt_ac=e_ref.acv,
                         method='splign',
                         strand=e_prd.genomic_coords.strand,
                         exons_se_i=e_prd.genomic_coords.intervals,
                         cds_se_i=None,
                )
            esw.write(es)
            
            if opts.with_transcripts and e_prd.acv not in tx_seen:
                e_tx = ec.fetch_nuccore_by_ac(e_prd.acv)
                es = ExonSet(tx_ac=e_prd.acv,
                             alt_ac=e_prd.acv,
                             method=None,
                             strand=1,
                             exons_se_i=e_tx.exons_se,
                             cds_se_i=e_tx.cds_se,
                    )
                esw.write(es)
                tx_seen.add(e_prd.acv)



if __name__ == '__main__':
    logging_conf_fn = pkg_resources.resource_filename('uta', 'etc/logging.conf')
    logging.config.fileConfig(logging_conf_fn)
    logging.getLogger().setLevel(logging.INFO)
    logger = logging.getLogger(__name__)

    opts = parse_args(sys.argv[1:])

    ec = eutils.client.Client()

    esw = ExonSetWriter(sys.stdout)
    logger.info('Writing exonsets to stdout')

    tx_seen = set()

    n = len(opts.GENES)
    for i,hgnc in enumerate(opts.GENES):
        try:
            e_gene = ec.fetch_gene_by_hgnc(hgnc)
            logger.info("="*70+"\n{i}/{n} ({p:.1f}%): {e_gene.hgnc}...".format(
                i=i, n=n, p=(i+1)/n*100, e_gene=e_gene))
            process1(ec,esw,hgnc)
        except Exception as e:
            logger.exception(e)
            pass
