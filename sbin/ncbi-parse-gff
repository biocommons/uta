#!/usr/bin/env python

"""Write exonsets and txinfo files from NCBI GFF alignments, as obtained from
ftp://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/alignments/
This service appeared in April 2015 and is due to update weekly.

See uta.formats for a description of those file formats.

In a nutshell, this means that you'll get data like this:

ncbi.txinfo.gz:
origin  ac  hgnc    cds_se_i    exons_se_i
NCBI RefSeq NM_053283.2 DCD 62,395  0,120;120,159;159,261;261,351;351,517

ncbi.exonsets.gz:
tx_ac   alt_ac  method  strand  exons_se_i
NM_130786.3 NC_000019.9 splign  -1  58864769,58864865;588646...
NM_130786.3 NC_018930.2 splign  -1  58858699,58858795;588585...
NM_130786.3 AC_000151.1 splign  -1  55173924,55174020;551738...
NM_138933.2 NC_000010.10    splign  -1  52645340,52645435;52...

UTA requires that the exon structure of a transcript accession as
defined on its own sequence is unique. Although this is mostly true,
there are instances where NCBI reports different exon structures for a
single transcript. For example, NM_001300954.1 aligns with 11 exons on
NC_000011.9 and 5 exons on NW_003871081.1, and the differences are NOT
due merely to concatenation of adjacent spans.  This script warns
vaguely about this problem 

"""


from __future__ import division

import argparse
from collections import defaultdict
import gzip
import io
import itertools
import logging
import logging.config
import os
import pprint
import pkg_resources
import re
import sys

import Bio.SeqIO
from bioutils.digests import seq_md5
import eutils.clientx

from uta.formats.exonset import ExonSet, ExonSetWriter
from uta.formats.txinfo import TxInfo, TxInfoWriter, TxInfoReader
from uta.formats.geneaccessions import GeneAccessionsReader

transcript_origin = "NCBI RefSeq"


def parse_args(argv):
    ap = argparse.ArgumentParser(
        description=__doc__,
    )
    ap.add_argument("in_fn")
    ap.add_argument("--origin", "-o",
                    default="NCBI")
    ap.add_argument("--prefix", "-p",
                    default="ncbi-gff")
    ap.add_argument("--geneacs", "-G")
    ap.add_argument("--txinfo", "-T")
    opts = ap.parse_args(argv)
    return opts


def read_transcript_data(fn):
    """yield dictionaries of transcript alignment data; each yield
    corresponds to one full transcript record across lines"""

    def _read_lines(fn):
        # NC_000007.13	RefSeq	cDNA_match	50344265	50344518	254	+	.	ID=aln58042;Target=NM_001220765.2 1 254 +;gap_count=0;identity=0.0691326;idty=1;num_ident=428;num_mismatch=0;pct_coverage=6.91326;pct_identity_gap=100;pct_identity_ungap=100;score=254
        line_re = re.compile(
            "(?P<ref_ac>\S+)\t(?P<origin>\S+)\t(?P<match_type>\S+)\t"
            "(?P<g_start>\d+)\t(?P<g_end>\d+)\t(?P<score>\S+)\t"
            "(?P<strand>[-+])\t\.\tID=(?P<aln>aln\d+);Target=(?P<tx_ac>\S+)"
            "\s+(?P<tx_start>\d+)\s+(?P<tx_end>\d+).+?"
            "pct_coverage=(?P<pct_coverage>[^;]+);"
            "pct_identity_gap=(?P<pct_identity_gap>[^;]+);"
            "pct_identity_ungap=(?P<pct_identity_ungap>[^;]+)")
        fh = io.open(fn, "rb")
        while fh.peek(1)[0] == "#":
            fh.readline()
        while fh.peek(3)[0:3] != "###":
            line = fh.readline()
            try:
                yield line_re.match(line).groupdict()
            except AttributeError:
                raise Exception("Failed at", line)
        raise StopIteration

    return itertools.groupby(_read_lines(fn), key=lambda e: e["aln"])


def convert_exon_data(opts, exon_recs):
    """return (TxInfo,ExonSet) tuple for given exon record data"""
    er0 = exon_recs[0]
    ti = TxInfo(ac=er0["tx_ac"],
                origin="NCBI RefSeq",
                hgnc=None,
                cds_se_i=None,
                exons_se_i=";".join(
                    ["{},{}".format(int(ex["tx_start"]) - 1, ex["tx_end"]) for ex in exon_recs])
                )
    es = ExonSet(
        tx_ac=er0["tx_ac"],
        alt_ac=er0["ref_ac"],
        method="splign",
        strand=-1 if er0["strand"] == "-" else 1,
        exons_se_i=";".join(
            ["{},{}".format(int(ex["g_start"]) - 1, ex["g_end"]) for ex in exon_recs])
    )
    return (ti, es)


if __name__ == "__main__":
    logging_conf_fn = pkg_resources.resource_filename(
        "uta", "etc/logging.conf")
    logging.config.fileConfig(logging_conf_fn)
    logging.getLogger().setLevel(logging.INFO)
    logger = logging.getLogger(__name__)

    opts = parse_args(sys.argv[1:])

    if opts.geneacs:
        gar = GeneAccessionsReader(gzip.open(opts.geneacs, "r"))
        tx2gene = {ga.tx_ac: ga.hgnc for ga in gar}
        logger.info(
            "read {} gene-accession mappings from {}".format(len(tx2gene), opts.geneacs))
    else:
        tx2gene = None
        logger.info("No geneacs (-G) file provided; gene info will be empty.")
        
    if opts.txinfo:
        tir = TxInfoReader(gzip.open(opts.txinfo, "r"))
        tx2ti = {ti.ac: ti for ti in tir}
        logger.info(
            "read {} gene-accession mappings from {}".format(len(tx2ti), opts.txinfo))
    else:
        tx2ti = None
        logger.info("No gbff txinfo provided (-T); CDS start,end will be undefined for all transcripts")

    es_fn = opts.prefix + "exonset.gz"
    ti_fn = opts.prefix + "txinfo.gz"

    esw = ExonSetWriter(gzip.open(es_fn + ".tmp", "w"))
    tiw = TxInfoWriter(gzip.open(ti_fn + ".tmp", "w"))

    tis = {}
    ac_not_in_gbff = set()
    ac_exons_differ = set()
    ac_in_source = set()
    ac_failed = set()

    for aln, eri in read_transcript_data(opts.in_fn):
        exon_recs = list(eri)
        er0 = exon_recs[0]

        # From Terence Murphy, NCBI:
        # "For remapping variation, we typically only use transcript
        # and RefSeqGene alignments that meet the filter:
        # 'pct_identity_gap >= 99.5 and pct_coverage >= 95'"
        if (   (float(er0["pct_coverage"      ]) < 95)
            or (float(er0["pct_identity_gap"  ]) < 99.5)):
            ac_failed.add(er0["tx_ac"])
            continue
            
        ti, es = convert_exon_data(opts, exon_recs)
        ac_in_source.add(ti.ac)

        # complain if we've seen this transcript before and the
        # transcript exon coordinates don't match
        #
        # TODO: Urgent: This case is a real problem. We should
        # prioritize NC and align against only those when transcript
        # exon structures change.
        if ti.ac in tis:
            if ti.exons_se_i != tis[ti.ac].exons_se_i:
                logger.warn("{ti.ac}: defined on against two references and "
                            "transcript exon sets don't match".format(ti=ti))
        else:
            tis[ti.ac] = ti

        # gene info isn't in gff; pull gene info for transcripts from
        # geneacs file (if -G provided)
        try:
            if tx2gene:
                ti.hgnc = tx2gene.get(ti.ac, None)
        except KeyError:
            logger.warn("skipping transcript {ti.ac}; no gene info in {opts.geneinfo}".format(
                ti=ti, opts=opts))

        # Compare exon structure from gbff with input gff
        # If gff tx is in gbff, compare exon structure and liftover CDS start and end
        # If not, add to ac_not_in_gbff warning list
        try:
            if tx2ti:
                gbff_ti = tx2ti[ti.ac]
                ti.cds_se_i = gbff_ti.cds_se_i  # possibly None
                if ti.exons_se_i != gbff_ti.exons_se_i:
                    logging.warn("{ac}  (gff): {exons}".format(ac=ti.ac, exons=ti.exons_se_i))
                    logging.warn("{ac} (gbff): {exons}".format(ac=gbff_ti.ac, exons=gbff_ti.exons_se_i))
                    ac_exons_differ.add(ti.ac)
        except KeyError:
            ac_not_in_gbff.add(ti.ac)

        tiw.write(ti)
        esw.write(es)



    for fn in [ti_fn, es_fn]:
        os.rename(fn + ".tmp", fn)

    seen_but_failed = ac_failed - ac_in_source
    if seen_but_failed:
        logger.warn("{n_acv} acvs seen but failed criteria: {acs}".format(
            n_acv=len(seen_but_failed), acs=",".join(sorted(seen_but_failed))))

    if ac_not_in_gbff:
        s_not_g_b = set(k.partition(".")[
                        0] for k in ac_in_source) - set(k.partition(".")[0] for k in tx2gene.keys())
        logger.warn("{n_acv} acvs ({n_ac} base acs))  in source not in geneacs file: {acs}".format(
            n_acv=len(ac_not_in_gbff), n_ac=len(s_not_g_b), opts=opts, acs=",".join(sorted(ac_not_in_gbff))))

    if ac_exons_differ:
        logger.warn("{n} accessions in gbff-derived txinfo have different exon coordinates: {acs}".format(
            n=len(ac_exons_differ), opts=opts, acs=",".join(sorted(ac_exons_differ))))
