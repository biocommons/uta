===================================
UTA -- Universal Transcript Archive
===================================

*bringing smiles to transcript users since 2013*

.. `Docs <http://pythonhosted.org/uta/>`_ | 

|build_status|


Overview
--------

The UTA (Universal Transcript Archive) stores transcripts aligned to
sequence references (typically genome reference assemblies). It supports
aligning the same transcript to multiple references using multiple
alignment methods.  Specifically, it facilitates the following:

* querying for multiple transcript sources through a single
  interface
* interpretating variants reported in literature against obsolete
  transcript records
* identifying regions where transcript and reference genome sequence
  assemblies disagree
* comparing transcripts across from distinct sources
* comparing transcript alignments generated by multiple methods
* identifying ambiguities in transcript alignments

UTA is used by the `hgvs`_ package to map variants between genomic,
transcript, and protein coordinates.

This code repository is primarily used for *generating* the UTA
database.  The primary interface for the database itself is via direct
PostgreSQL access.  (A `REST interface
<https://bitbucket.org/biocommons/uta/issue/164/>`_ is planned, but not yet
available.)


Accessing the Public UTA Instance
---------------------------------

Invitae provides a public instance of UTA.  The connection parameters are:

============  ===================
**param**     **value**
============  ===================
**host**      ``uta.invitae.com``
**port**      ``5432`` (default)
**database**  ``uta``
**login**     ``uta_public``
**password**  ``uta_public``
============  ===================


For example::

  $ PGPASSWORD=uta_public psql -h uta.invitae.com -U uta_public -d uta

Or, in Python::

  > import psycopg2, psycopg2.extras
  > conn = psycopg2.connect("host=uta.invitae.com dbname=uta user=uta_public password=uta_public")
  > cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
  > cur.execute("select * from uta_20140210.tx_def_summary_v where hgnc='BRCA1'")
  > row = cur.fetchone()
  > dict(row)
  {
  'hgnc': 'BRCA1', 
  'tx_ac': 'ENST00000586385', 
  'cds_md5': '5d405c70b9b79add38d28e5011a6ddc0', 
  'es_fingerprint': '95d60b8d62f5c23cbeff3499eedf5e89', 
  'cds_start_i': 144, 
  'cds_end_i': 666, 
  'starts_i': [0, 148, 226, 267, 351, 406, 480, 541],
  'ends_i': [148, 226, 267, 351, 406, 480, 541, 781], 
  'lengths': [148, 78, 41, 84, 55, 74, 61, 240],
  }


Installing UTA Locally
----------------------

These instructions are for Linux/Unix. A similar process should work for
other platforms.

UTA releases are in a single *schema*, named like uta\_\ ``date``.
Multiple versions of UTA may be installed in a single
database.  UTA can easily coexist within existing databases with
unrelated schemas.

#. Install PostgreSQL. Make sure that you can log in with psql.

#. Choose a database in which to install uta. The schema name ``uta`` is
   assumed in these instructions.

   If you don't have an existing database, create one with ``createdb
   uta``.

#. Download a database dump:
   
   **uta_2015827**
     | Contains NCBI updates through August 2015 and Ensembl-79.
     | `schema only (5KB) <http://dl.biocommons.org/uta-dumps/uta_20150827-schema.pgd.gz>`__ | `schema+data (571MB) <http://dl.biocommons.org/uta-dumps/uta_20150827.pgd.gz>`__ [`sha1 <http://dl.biocommons.org/uta-dumps/uta_20150827.pgd.gz.sha1>`__]

   **uta_20140210**
     | Original production release w/data from manuscript
     | `schema only (5KB) <http://dl.biocommons.org/uta-dumps/uta_20140210-schema.pgd.gz>`__ | `schema+data (358MB) <http://dl.biocommons.org/uta-dumps/uta_20140210.pgd.gz>`__ [`sha1 <http://dl.biocommons.org/uta-dumps/uta_20140210.pgd.gz.sha1>`__]


#. Install database

   ::

   $ gzip -cdq uta_20150827.pgd.gz | psql -1aeE -d uta -v ON_ERROR_STOP=1

   *Optional*: Installing an empty schema is a good way to find and
   debug loading issues quickly. See above for schema-only dumps.
  
#. Manually refresh materialized views.

   UTA uses materialized views to speed up some queries. You probably want
   to refresh those with ``refresh materialized view <viewname>``.  At
   this time, there is no automated way to do this.  ``\dm`` lists
   materialized views.




Development and Testing
-----------------------

To develop UTA, follow these steps.

1. Setup a virtual environment.

  With virtualenvwrapper_::

    mkvirtualenv uta-ve

  Or, with virtualenv_::

    virtualenv uta-ve
    source uta-ve/bin/activate

2. Clone UTA.::

    hg clone ssh://hg@bitbucket.org/biocommons/uta
    cd uta
    make develop

3. Restore a database or load a new one

  UTA currently expects to have an existing database available. When the
  loaders are available, instructions will appear here.  For now, creating
  an instance of TranscriptDB without arguments will cause it to connect
  to a populated Invitae database.


.. _hgvs: https://bitbucket.org/invitae/hgvs
.. _virtualenv: https://pypi.python.org/pypi/virtualenv
.. _virtualenvwrapper: http://virtualenvwrapper.readthedocs.org/en/latest/install.html


.. |build_status| image:: https://drone.io/bitbucket.org/biocommons/uta/status.png
  :target: https://drone.io/bitbucket.org/biocommons/uta
  :align: middle
