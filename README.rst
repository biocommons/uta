uta -- Universal Transcript Archive
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

*bringing smiles to transcript users since 2013*

.. `Docs <http://pythonhosted.org/uta/>`_ | 

| |build_status|
| (N.B. Build failures appear to be related to drone.io VM configuration during pip install. Testing in naive VMs on development machines work as expected. A workaround is under investigation.)


Overview
@@@@@@@@

The UTA (Universal Transcript Archive) stores transcripts aligned to
sequence references (typically genome reference assemblies). It supports
aligning the same transcript to multiple references using multiple
alignment methods.  Specifically, it facilitates the following:

* querying for multiple transcript sources through a single
  interface
* interpretating variants reported in literature against obsolete
  transcript records
* identifying regions where transcript and reference genome sequence
  assemblies disagree
* comparing transcripts across from distinct sources
* comparing transcript alignments generated by multiple methods
* identifying ambiguities in transcript alignments

UTA is used by the `hgvs`_ package to map variants between genomic,
transcript, and protein coordinates.

This code repository is primarily used for *generating* the UTA
database.  The primary interface for the database itself is via direct
PostgreSQL access.  (A `REST interface
<https://bitbucket.org/biocommons/uta/issue/164/>`_ is planned, but not yet
available.)


Accessing the Public UTA Instance
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Invitae provides a public instance of UTA.  The connection parameters are:

============  ===================
**param**     **value**
============  ===================
**host**      ``uta.invitae.com``
**port**      ``5432`` (default)
**database**  ``uta``
**login**     ``uta_public``
**password**  ``uta_public``
============  ===================


For example::

  $ PGPASSWORD=uta_public psql -h uta.invitae.com -U uta_public -d uta

Or, in Python::

  > import psycopg2, psycopg2.extras
  > conn = psycopg2.connect("host=uta.invitae.com dbname=uta user=uta_public password=uta_public")
  > cur = conn.cursor(cursor_factory=psycopg2.extras.DictCursor)
  > cur.execute("select * from uta_20140210.tx_def_summary_v where hgnc='BRCA1'")
  > row = cur.fetchone()
  > dict(row)
  {
  'hgnc': 'BRCA1', 
  'tx_ac': 'ENST00000586385', 
  'cds_md5': '5d405c70b9b79add38d28e5011a6ddc0', 
  'es_fingerprint': '95d60b8d62f5c23cbeff3499eedf5e89', 
  'cds_start_i': 144, 
  'cds_end_i': 666, 
  'starts_i': [0, 148, 226, 267, 351, 406, 480, 541],
  'ends_i': [148, 226, 267, 351, 406, 480, 541, 781], 
  'lengths': [148, 78, 41, 84, 55, 74, 61, 240],
  }


Installing UTA Locally
@@@@@@@@@@@@@@@@@@@@@@

`docker <http://docker.com>`_ enables the distribution of lightweight,
isolated packages that run on essentially many platforms.  When you
use this approach, you will end up with a local UTA installation that
runs as a local postgresql process.

#. `Install docker <https://docs.docker.com/installation/>`_.

#. Fetch the uta docker image from docker hub.

   ::

      $ docker pull biocommons/uta:uta_20150827

   This process will likely take 1-3 minutes.
   
#. Run the image 

   ::
      
      $ docker run -dit --name uta_20150827 -p 15032:5432 biocommons/uta:uta_20150827
      
   The first time you run this image, it will initialize a postgresql
   database cluster, then download a database dump and install it.  -d
   starts the container in daemon (background) mode. To see progress::

      $ docker logs -f uta_20150827

   You will see messages from several processes running in
   parallel. Near the end, you'll see::

     == You may now connect to uta.  No password is required.

   Hit Ctrl-C to stop watching logs. (The container will still be running.)

#. Test your installation

   ::

      $ psql -h localhost -p 15032 -U anonymous -d uta -c 'select * from uta_20150827.meta'



Development and Testing
@@@@@@@@@@@@@@@@@@@@@@@

To develop UTA, follow these steps.

1. Setup a virtual environment.

  With virtualenvwrapper_::

    mkvirtualenv uta-ve

  Or, with virtualenv_::

    virtualenv uta-ve
    source uta-ve/bin/activate

2. Clone UTA.::

    hg clone ssh://hg@bitbucket.org/biocommons/uta
    cd uta
    make develop

3. Restore a database or load a new one

  UTA currently expects to have an existing database available. When the
  loaders are available, instructions will appear here.  For now, creating
  an instance of TranscriptDB without arguments will cause it to connect
  to a populated Invitae database.


.. _hgvs: https://bitbucket.org/invitae/hgvs
.. _virtualenv: https://pypi.python.org/pypi/virtualenv
.. _virtualenvwrapper: http://virtualenvwrapper.readthedocs.org/en/latest/install.html


.. |build_status| image:: https://drone.io/bitbucket.org/biocommons/uta/status.png
  :target: https://drone.io/bitbucket.org/biocommons/uta
  :align: middle