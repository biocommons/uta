import uta
from flask import Flask, jsonify
from flask.ext import restful
from flask.ext.restful import reqparse, abort, Api, Resource
from uta.db.transcriptdb import TranscriptDB
from uta.tools.hgvsmapper import HGVSMapper

"""
Example usage and output:

curl http://127.0.0.1:5000/uta/api -d "hgvsg=NC_000007.13:g.36561662C>T&ac=NM_001177507.1&ref=GRCh37.p10" -X POST
{
  "hgvsc": "NM_001177507.1:c.1486C>T",
  "hgvsp": "TBD",
  "uta_version": "version is not working..."
}
"""

"""
Try this and see if the error message is appropriate
$ curl -d 'rate=foo' http://127.0.0.1:5000/
{'status': 400, 'message': 'foo cannot be converted to int'}
"""

app = Flask(__name__)
api = restful.Api(app)

parser = reqparse.RequestParser()
# Args for UTA
parser.add_argument('hgvsg', type=str, help='HGVS location e.g. hgvsg=NC_000007.13:g.36561662C>T', required=True)
parser.add_argument('ac', type=str, help='Accession e.g. ac=NM_001177507.1', required=True)
parser.add_argument('ref', type=str, help='Genomic build reference e.g. ref=GRCh37.p10', required=True)

hgvsmapper = HGVSMapper(db=TranscriptDB(), cache_transcripts=True)

# RESTful interface using POST
# POST is necessary to properly encode the transcript names
class HGVSMapper(restful.Resource):
    def post(self):
        args = parser.parse_args()

        hgvsc = hgvsmapper.hgvsg_to_hgvsc(args['hgvsg'], ac=args['ac'], ref=args['ref'])

        uta_version = uta.__version__
        if uta_version is None:
            uta_version = 'version is not working...'

        return jsonify({'uta_version': uta_version,
                        'hgvsc': hgvsc,
                        'hgvsp': 'TBD'})


api.add_resource(HGVSMapper, '/uta/api')


if __name__ == '__main__':
    app.run(debug=True)

